import requests
import re
from os import listdir
from os.path import isfile, join
import zipfile
import json
from matplotlib import pyplot as plt
from matplotlib import colors as mcolors


def contains_word(sentence: str, word: str) -> bool:
    return (' ' + word.lower() + ' ') in (' ' + sentence.lower() + ' ')


def download_nvd_data() -> None:
    url = 'https://nvd.nist.gov/vuln/data-feeds#JSON_FEED'
    r = requests.get(url)
    if r.status_code == 200:
        for filename in re.findall(r'nvdcve-1.1-\d+\.json\.zip', r.text):
            url_file = 'https://nvd.nist.gov/feeds/json/cve/1.1/' + filename
            r_file = requests.get(url_file, stream=True)
            if r_file.status_code == 200:
                with open(f"zip/{filename}", 'wb') as f:
                    for chunk in r_file.iter_content(chunk_size=8192):
                        f.write(chunk)
                print("File", filename, "downloaded successfully.")
            else:
                print("Error downloading file", filename, "- Status code:", r_file.status_code)
    else:
        print("Error retrieving data feed - Status code:", r.status_code)


def unzip_data() -> None:
    zip_folder = 'zip/'
    json_folder = 'json/'
    files = [f for f in listdir(zip_folder) if isfile(join(zip_folder, f))]
    files.sort()
    for file in files:
        print("Opening:", file)
        try:
            with zipfile.ZipFile(join(zip_folder, file), 'r') as archive:
                archive.extractall(json_folder)
            print("File", file, "extracted successfully.")
        except zipfile.BadZipFile:
            print("Error: Invalid ZIP file -", file)
        except Exception as e:
            print("Error extracting file", file, "-", str(e))


def create_nvd_dict(year: int) -> dict:
    filename = join('json', f"nvdcve-1.1-{year}.json")
    try:
        with open(filename, encoding='utf8') as json_file:
            cve_dict = json.load(json_file)
        return cve_dict
    except FileNotFoundError:
        print("Error: File not found -", filename)
    except json.JSONDecodeError as e:
        print("Error decoding JSON file", filename, "-", str(e))
    except Exception as e:
        print("Error loading file", filename, "-", str(e))
    return {}


def get_number_of_nvd_reports(years: list) -> dict:
    number_of_reports = {}
    for year in years:
        nvd_dict = create_nvd_dict(year)
        number_of_reports[year] = int(nvd_dict['CVE_data_numberOfCVEs'])
    return number_of_reports


def plot_nvd_reports(years: list) -> None:
    year_and_number_of_cves = {2002: 6769, 2003: 1553, 2004: 2707, 2005: 4765, 2006: 7142, 2007: 6579, 2008: 7174, 2009: 5029, 2010: 5199, 2011: 4834, 2012: 5853, 2013: 6700, 2014: 8967, 2015: 8701, 2016: 10537, 2017: 16887, 2018: 16949, 2019: 16871, 2020: 20076, 2021: 21569, 2022: 23123, 2023: 5943}
    years = year_and_number_of_cves.keys()
    number_of_cves = year_and_number_of_cves.values()

    colors = [mcolors.to_hex(color) for color in mcolors.TABLEAU_COLORS.values()]

    plt.bar(years, number_of_cves, color=colors)
    plt.xlabel('Year')
    plt.ylabel('Reported Vulnerabilities')
    plt.title('Reported Vulnerabilities 2002-2023')
    
    for x, y in year_and_number_of_cves.items():
        plt.text(x, y + 100, str(y), ha='center')
    
    plt.xticks(list(years))
    plt.show()


def fetch_nvd_data(year: int) -> dict:
    nvd_dict = create_nvd_dict(year)
    return nvd_dict['CVE_Items']
